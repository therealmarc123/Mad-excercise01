/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package at.ac.fhcampuswien

class App {
    // Game logic for a number guessing game
    fun playNumberGame(digitsToGuess: Int = 4) {
        //TODO: build a menu which calls the functions and works with the return values
        val uniqueNumber = generateRandomNonRepeatingNumber(digitsToGuess)
        println("A unique $digitsToGuess-digit sequence has been prepared. Can you figure it out?")
        while (true) {

            println("Input your guess for the $digitsToGuess-digit sequence:")
            val guess = readLine()?.toIntOrNull()
            if (guess != null && guess.toString().length == digitsToGuess) {

                val comparisonResult = checkUserInputAgainstGeneratedNumber(guess, uniqueNumber)
                println("Correct digits, wrong positions: ${comparisonResult.n}.")
                println("Exact matches: ${comparisonResult.m} digit(s) in the correct spot.")
                if (comparisonResult.m == digitsToGuess) {

                    println("You've successfully guessed the sequence! Game over.")
                    break
                } else {

                    println("Close, but not quite. Try again!")
                }
            } else {

                println("Oops! Your input was invalid. Ensure it's a $digitsToGuess-digit number with distinct digits.")
            }
        }

    }

    /**
     * Generates a non-repeating number of a specified length between 1-9.
     *
     * Note: The function is designed to generate a number where each digit is unique and does not repeat.
     * It is important to ensure that the length parameter does not exceed the maximum possible length
     * for non-repeating digits (which is 9 excluding 0 for base-10 numbers).
     *
     * @param length The length of the non-repeating number to be generated.
     *               This dictates how many digits the generated number will have.
     * @return An integer of generated non-repeating number.
     *         The generated number will have a number of digits equal to the specified length and will
     *         contain unique, non-repeating digits.
     * @throws IllegalArgumentException if the length is more than 9 or less than 1.
     */
    val generateRandomNonRepeatingNumber: (Int) -> Int = { length ->
        //TODO implement the function
        if (length < 1 || length > 9) throw IllegalArgumentException("Length must be between 1 and 9.")

        val availableDigits = (1..9).toList()
        val selectedDigits = mutableListOf<Int>()
        while (selectedDigits.size < length) {
            val randomDigit = availableDigits.shuffled().first { !selectedDigits.contains(it) }
            selectedDigits.add(randomDigit)
        }

        selectedDigits.joinToString("").toInt()
    }

    /**
     * Compares the user's input integer against a generated number for a guessing game.
     * This function evaluates how many digits the user guessed correctly and how many of those
     * are in the correct position. The game generates number with non-repeating digits.
     *
     * Note: The input and the generated number must both be numbers.
     * If the inputs do not meet these criteria, an IllegalArgumentException is thrown.
     *
     * @param input The user's input integer. It should be a number with non-repeating digits.
     * @param generatedNumber The generated number with non-repeating digits to compare against.
     * @return [CompareResult] with two properties:
     *         1. `n`: The number of digits guessed correctly (regardless of their position).
     *         2. `m`: The number of digits guessed correctly and in the correct position.
     *         The result is formatted as "Output: m:n", where "m" and "n" represent the above values, respectively.
     * @throws IllegalArgumentException if the inputs do not have the same number of digits.
     */
    val checkUserInputAgainstGeneratedNumber: (Int, Int) -> CompareResult = { input, generatedNumber ->
        //TODO implement the function
        val strGenerated = generatedNumber.toString()
        val strInput = input.toString()

        require(strInput.length == strGenerated.length) { "Input and generated number must have the same length." }

        var m = 0
        val n = strInput.toSet().count { it in strGenerated }
        strInput.forEachIndexed { index, c ->
            if (c == strGenerated[index]) {

                m++
            }
        }

        CompareResult(n, m)

        //CompareResult(0, 0)   // return value is a placeholder
    }


fun main() {
    // TODO: call the App.playNumberGame function with and without default arguments
    println("Get ready to test your number-guessing skills.")
    val app = App()
    // Slightly rephrase the prompt for input
    println("Choose the number of digits you wish to guess (1-9). Hit Enter for the default setting:")
    val input = readlnOrNull()
    if (input.isNullOrEmpty()) {

        println("No input detected. Proceeding with the default challenge of 4 digits...")
        app.playNumberGame()
    } else {

        val digits = input.toIntOrNull() ?: 4
        println("Challenge accepted! You will be guessing a number with $digits digit(s).")
        app.playNumberGame(digits)
    }

}}

